// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  favoriteIds        String[]  @db.ObjectId
  role               String    @default("user")
  agency             String?
  agency_description String?
  agency_address     String?

  accounts    Account[]
  listings    Listing[]
  reservation Reservation[]
  StaffMember StaffMember[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model StaffMember {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  phone  String?
  email  String?
  agent  User?   @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title         String
  description   String
  purpose       String
  category      String
  type          String
  city          String
  locationValue String
  area          Int
  roomCount     Int
  bathroomCount Int
  imageSrc      String
  price         Int
  contact       String?

  tvLounge       Int?
  balcony        Int?
  kitchen        Int?
  drawingRoom    Int?
  servantQuaters Int?

  createdAt DateTime @default(now())
  condition String?

  userId String @db.ObjectId

  reservations Reservation[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
